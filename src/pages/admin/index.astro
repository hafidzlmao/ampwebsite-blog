---
import BlogLayout from '../../layouts/BlogLayout.astro';
import PostList from '../../components/admin/PostList';
import PostEditor from '../../components/admin/PostEditor';
import { getCollection } from 'astro:content';
import { createPost, updatePost, deletePost } from '../../lib/blog';

const posts = await getCollection('blog');

const mappedPosts = posts.map(post => ({
  id: post.id,
  title: post.data.title,
  description: post.data.description,
  content: post.body,
  category: post.data.category,
  tags: post.data.tags,
  pubDate: post.data.pubDate,
  featured: post.data.featured || false,
  author: post.data.author,
  readingTime: post.data.readingTime,
  image: post.data.image,
  imageAlt: post.data.imageAlt
}));
---

<BlogLayout title="Admin Dashboard" description="Manage your blog posts">
  <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <div class="px-4 py-6 sm:px-0">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900">Blog Posts</h1>
        <button
          id="newPost"
          class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
        >
          New Post
        </button>
      </div>

      <div id="error-message" class="hidden mb-4 p-4 rounded-md bg-red-50 text-red-700"></div>
      <div id="success-message" class="hidden mb-4 p-4 rounded-md bg-green-50 text-green-700"></div>

      <div id="editor" class="hidden mb-8">
        <PostEditor 
          client:load
          post={null}
          onSave={async (post) => {
            const errorDiv = document.getElementById('error-message');
            const successDiv = document.getElementById('success-message');
            const editorDiv = document.getElementById('editor');
            
            try {
              console.log('Saving post:', post);
              
              if (post.id) {
                await updatePost(post.id, post);
              } else {
                await createPost(post);
              }

              // Show success message
              successDiv?.classList.remove('hidden');
              successDiv.textContent = 'Post saved successfully!';
              
              // Hide error message if shown
              errorDiv?.classList.add('hidden');
              errorDiv.textContent = '';
              
              // Hide editor
              editorDiv?.classList.add('hidden');

              // Reload after a short delay
              setTimeout(() => window.location.reload(), 1000);
            } catch (error) {
              console.error('Failed to save post:', error);
              errorDiv?.classList.remove('hidden');
              errorDiv.textContent = `Failed to save post: ${error.message}`;
              successDiv?.classList.add('hidden');
            }
          }}
          onCancel={() => {
            const editor = document.getElementById('editor');
            const errorDiv = document.getElementById('error-message');
            const successDiv = document.getElementById('success-message');
            editor?.classList.add('hidden');
            errorDiv?.classList.add('hidden');
            successDiv?.classList.add('hidden');
            errorDiv.textContent = '';
            successDiv.textContent = '';
          }}
        />
      </div>

      <PostList
        client:load
        posts={mappedPosts}
        onEdit={(post) => {
          const editor = document.getElementById('editor');
          const errorDiv = document.getElementById('error-message');
          const successDiv = document.getElementById('success-message');
          
          editor?.classList.remove('hidden');
          errorDiv?.classList.add('hidden');
          successDiv?.classList.add('hidden');
          errorDiv.textContent = '';
          successDiv.textContent = '';

          // Pass the post data to the editor component
          const editorComponent = document.querySelector('post-editor');
          if (editorComponent) {
            // @ts-ignore
            editorComponent.setAttribute('data-post', JSON.stringify(post));
          }
        }}
        onDelete={async (post) => {
          if (confirm('Are you sure you want to delete this post?')) {
            const errorDiv = document.getElementById('error-message');
            const successDiv = document.getElementById('success-message');
            
            try {
              await deletePost(post.id);
              successDiv?.classList.remove('hidden');
              successDiv.textContent = 'Post deleted successfully!';
              setTimeout(() => window.location.reload(), 1000);
            } catch (error) {
              console.error('Failed to delete post:', error);
              errorDiv?.classList.remove('hidden');
              errorDiv.textContent = `Failed to delete post: ${error.message}`;
              successDiv?.classList.add('hidden');
            }
          }
        }}
      />
    </div>
  </div>
</BlogLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const newPostButton = document.getElementById('newPost');
    const editorDiv = document.getElementById('editor');
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');
    const editorComponent = document.querySelector('post-editor');

    // Watch for attribute changes on the editor component
    if (editorComponent) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'data-post') {
            const postData = editorComponent.getAttribute('data-post');
            if (postData) {
              // @ts-ignore
              editorComponent.__post = JSON.parse(postData);
            }
          }
        });
      });

      observer.observe(editorComponent, { attributes: true });
    }

    newPostButton?.addEventListener('click', () => {
      editorDiv?.classList.remove('hidden');
      errorDiv?.classList.add('hidden');
      successDiv?.classList.add('hidden');
      errorDiv.textContent = '';
      successDiv.textContent = '';

      if (editorComponent) {
        editorComponent.removeAttribute('data-post');
        // @ts-ignore
        editorComponent.__post = null;
      }
    });
  });
</script>

<style>
  #error-message:not(.hidden),
  #success-message:not(.hidden) {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>