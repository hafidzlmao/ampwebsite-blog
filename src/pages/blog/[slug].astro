---
import BlogLayout from '../../layouts/BlogLayout.astro';
import ErrorBoundary from '../../components/common/ErrorBoundary.astro';
import PostHeader from '../../components/blog/PostHeader.astro';
import PostImage from '../../components/blog/PostImage.astro';
import ShareButtons from '../../components/share/ShareButtons.astro';
import TableOfContents from '../../components/toc/TableOfContents.astro';
import RelatedPosts from '../../components/blog/RelatedPosts.astro';
import { getPostBySlug, getCachedCollection } from '../../lib/content';
import { getRelatedPosts } from '../../utils/blogHelpers';
import { handleError } from '../../lib/errors';

export async function getStaticPaths() {
  try {
    const posts = await getCachedCollection('blog');
    return posts.map(post => ({
      params: { slug: post.slug },
      props: { post }
    }));
  } catch (error) {
    throw handleError(error);
  }
}

const { slug } = Astro.params;
const post = await getPostBySlug(slug);

if (!post) {
  return new Response('Post not found', { status: 404 });
}

const { Content, headings } = await post.render();
const allPosts = await getCachedCollection('blog');
const relatedPosts = getRelatedPosts(post, allPosts);
const url = new URL(Astro.url.pathname, Astro.site).toString();
---

<BlogLayout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  article={true}
  publishDate={post.data.pubDate}
  author={{
    name: post.data.author.name,
    image: post.data.author.image
  }}
>
  <ErrorBoundary>
    <article class="max-w-3xl mx-auto">
      <PostHeader post={post} />
      
      <div class="mb-8">
        <ShareButtons url={url} title={post.data.title} />
      </div>

      <div class="mb-8 p-4 bg-gray-50 rounded-lg">
        <TableOfContents headings={headings} />
      </div>

      {post.data.image && (
        <PostImage
          src={post.data.image}
          alt={post.data.imageAlt || post.data.title}
          className="w-full h-[400px] rounded-lg mb-8"
        />
      )}

      <div class="prose prose-lg mx-auto">
        <Content />
      </div>

      <div class="mt-8 flex flex-wrap gap-2">
        {post.data.tags.map(tag => (
          <a
            href={`/tag/${tag}`}
            class="px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm hover:bg-gray-200 transition-colors"
          >
            {tag}
          </a>
        ))}
      </div>

      <RelatedPosts posts={relatedPosts} />
    </article>
  </ErrorBoundary>
</BlogLayout>